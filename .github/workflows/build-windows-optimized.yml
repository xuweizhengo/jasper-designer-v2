name: Optimized Windows Build

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc
        components: rustfmt, clippy

    # 缓存 cargo-chef 二进制文件
    - name: Cache cargo-chef binary
      id: cache-chef-binary
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/cargo-chef.exe
        key: ${{ runner.os }}-cargo-chef-0.1.67

    # 只在没有缓存时安装 cargo-chef
    - name: Install cargo-chef
      if: steps.cache-chef-binary.outputs.cache-hit != 'true'
      run: |
        cargo install cargo-chef --version 0.1.67 --locked

    # 缓存 Cargo 注册表和 git 依赖
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    # 缓存整个 target 目录（包括依赖和增量编译）
    - name: Cache cargo target
      uses: actions/cache@v3
      with:
        path: |
          src-tauri/target
        key: ${{ runner.os }}-cargo-target-release-${{ hashFiles('src-tauri/Cargo.lock') }}-${{ hashFiles('src-tauri/src/**') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-release-${{ hashFiles('src-tauri/Cargo.lock') }}-
          ${{ runner.os }}-cargo-target-release-

    # 缓存 node_modules
    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    # 缓存前端构建产物
    - name: Cache frontend build
      uses: actions/cache@v3
      with:
        path: |
          dist
        key: ${{ runner.os }}-frontend-dist-${{ hashFiles('src/**', 'package.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-dist-

    # 准备 cargo-chef recipe
    - name: Prepare cargo-chef recipe
      run: |
        cd src-tauri
        cargo chef prepare --recipe-path recipe.json

    # 检查是否需要重新编译依赖
    - name: Check and cook dependencies if needed
      shell: powershell
      run: |
        cd src-tauri
        $needsCook = $true

        # 检查 target/release/.fingerprint 是否存在
        if (Test-Path "target/release/.fingerprint") {
          Write-Host "Found existing build artifacts"

          # 检查最近的构建时间
          $lastBuild = (Get-ChildItem "target/release/.fingerprint" -Recurse |
                       Sort-Object LastWriteTime -Descending |
                       Select-Object -First 1).LastWriteTime

          $cargoLock = (Get-Item "Cargo.lock").LastWriteTime

          if ($lastBuild -gt $cargoLock) {
            Write-Host "Dependencies are up to date (last build: $lastBuild)"
            $needsCook = $false
          }
        }

        if ($needsCook) {
          Write-Host "Cooking dependencies..."
          cargo chef cook --release --recipe-path recipe.json --target x86_64-pc-windows-msvc
        } else {
          Write-Host "Skipping dependency compilation - using cache"
        }

    # 安装前端依赖（优化）
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit --no-fund --loglevel error || npm install --legacy-peer-deps --loglevel error

    # 生成图标（检查是否已存在）
    - name: Generate compatible icons
      shell: powershell
      run: |
        if (Test-Path "src-tauri/icons/icon.ico") {
          Write-Host "Icons already exist, skipping generation"
        } else {
          Write-Host "Generating standard ICO file..."

          # 标准的32x32 ICO文件 (蓝色背景，白色J字母)
          $icoBase64 = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwwD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wBEgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA///+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9EgP//RID//0SA//9Eg

          $icoBytes = [Convert]::FromBase64String($icoBase64)
          [System.IO.File]::WriteAllBytes("src-tauri/icons/icon.ico", $icoBytes)

          # 生成其他PNG文件
          Add-Type -AssemblyName System.Drawing
          $bitmap = New-Object System.Drawing.Bitmap 256, 256
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)

          $brush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::FromArgb(255, 68, 128, 255))
          $graphics.FillRectangle($brush, 0, 0, 256, 256)

          $font = New-Object System.Drawing.Font("Arial", 72, [System.Drawing.FontStyle]::Bold)
          $textBrush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::White)
          $graphics.DrawString("J", $font, $textBrush, 85, 70)

          $bitmap.Save("src-tauri/icons/icon.png", [System.Drawing.Imaging.ImageFormat]::Png)

          $bitmap32 = New-Object System.Drawing.Bitmap $bitmap, 32, 32
          $bitmap32.Save("src-tauri/icons/32x32.png", [System.Drawing.Imaging.ImageFormat]::Png)
          $bitmap32.Dispose()

          $bitmap128 = New-Object System.Drawing.Bitmap $bitmap, 128, 128
          $bitmap128.Save("src-tauri/icons/128x128.png", [System.Drawing.Imaging.ImageFormat]::Png)
          $bitmap128.Dispose()

          $graphics.Dispose()
          $bitmap.Dispose()

          Write-Host "Icons generated successfully"
        }

    # 构建应用（优化编译参数）
    - name: Build application
      shell: powershell
      run: |
        Write-Host "Building with optimized settings..."

        # 设置优化的环境变量
        $env:CARGO_BUILD_JOBS = [Environment]::ProcessorCount
        $env:CARGO_TARGET_DIR = "src-tauri/target"
        $env:TAURI_PRIVATE_KEY = ""
        $env:TAURI_KEY_PASSWORD = ""

        Write-Host "Using $env:CARGO_BUILD_JOBS parallel jobs"

        # 检查前端是否需要重新构建
        $needsFrontendBuild = $true
        if (Test-Path "dist/index.html") {
          $distTime = (Get-Item "dist/index.html").LastWriteTime
          $srcTime = (Get-ChildItem "src" -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1).LastWriteTime

          if ($distTime -gt $srcTime) {
            Write-Host "Frontend is up to date, skipping build"
            $needsFrontendBuild = $false
          }
        }

        if ($needsFrontendBuild) {
          Write-Host "Building frontend..."
          npm run build
        }

        # 构建 Tauri 应用（跳过前端构建如果已存在）
        cd src-tauri
        if ($needsFrontendBuild) {
          cargo build --release --target x86_64-pc-windows-msvc
        } else {
          cargo build --release --target x86_64-pc-windows-msvc --no-default-features
        }

        Write-Host "Build completed!"
      env:
        RUST_LOG: warn
        CARGO_INCREMENTAL: 1

    # 打包构建文件
    - name: Package build files
      shell: powershell
      run: |
        $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
        $packageName = "jasper-designer-v2-OPTIMIZED-$timestamp"
        New-Item -ItemType Directory -Path $packageName -Force

        # 复制构建文件
        $sourcePaths = @(
          "src-tauri/target/release/*.exe",
          "src-tauri/target/release/*.dll"
        )

        foreach ($path in $sourcePaths) {
          if (Test-Path $path) {
            Copy-Item $path $packageName/ -Force -ErrorAction SilentlyContinue
          }
        }

        # 复制前端资源
        if (Test-Path "dist") {
          Copy-Item "dist/*" $packageName/ -Recurse -Force -ErrorAction SilentlyContinue
        }

        # 复制图标
        if (Test-Path "src-tauri/icons") {
          New-Item -ItemType Directory -Path "$packageName/icons" -Force
          Copy-Item "src-tauri/icons/*" "$packageName/icons/" -Force -ErrorAction SilentlyContinue
        }

        # 创建构建信息
        @"
        Jasper Designer Windows Build (Optimized with cargo-chef)

        Build Info:
        - Time: $(Get-Date)
        - Type: Optimized Build with cargo-chef (no sccache)
        - Branch: $env:GITHUB_REF_NAME
        - Commit: $env:GITHUB_SHA
        - Run ID: $env:GITHUB_RUN_ID

        Optimizations:
        - cargo-chef for dependency caching
        - Incremental compilation
        - Target directory caching
        - Frontend build caching
        - npm cache optimization
        - Parallel job optimization

        Usage:
        1. Extract the package
        2. Run jasper-designer.exe
        "@  | Out-File -FilePath "$packageName/BUILD_INFO.txt" -Encoding UTF8

        # 打包
        Compress-Archive -Path $packageName -DestinationPath "$packageName.zip" -Force

        # 设置环境变量
        echo "PACKAGE_NAME=$packageName" >> $env:GITHUB_ENV
        echo "PACKAGE_ZIP=$packageName.zip" >> $env:GITHUB_ENV

        Write-Host "Build package created: $packageName.zip"

    # 上传构建产物
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jasper-designer-windows-optimized-${{ github.run_id }}
        path: ${{ env.PACKAGE_ZIP }}
        retention-days: 30

    # 输出构建时间统计
    - name: Build time report
      shell: powershell
      run: |
        Write-Host "=== Build Time Report ==="
        Write-Host "Total workflow time will be shown in Actions summary"
        Write-Host ""
        Write-Host "Cache Status:"
        Write-Host "- cargo-chef binary: ${{ steps.cache-chef-binary.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}"
        Write-Host "- cargo registry: Check logs above"
        Write-Host "- cargo target: Check logs above"
        Write-Host "- node_modules: Check logs above"
        Write-Host "- frontend dist: Check logs above"
        Write-Host ""
        Write-Host "Expected performance:"
        Write-Host "- First run: ~10 minutes (building caches)"
        Write-Host "- Second run: ~3-5 minutes (with full cache)"
        Write-Host "- Code changes only: ~2-3 minutes"
        Write-Host "========================="